<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hoult의 개발일지</title>
    <link>http://sherwher.github.io/</link>
    
    <atom:link href="http://sherwher.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 21 Apr 2021 07:10:50 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LetsencryptSettingOnWindows(feat.Apache)</title>
      <link>http://sherwher.github.io/2021/04/21/LetsencryptSettingOnWindows(feat.Apache)/</link>
      <guid>http://sherwher.github.io/2021/04/21/LetsencryptSettingOnWindows(feat.Apache)/</guid>
      <pubDate>Wed, 21 Apr 2021 06:54:07 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;letsencrypt설정-server-apache-ssl-letscript-os-Windows10&quot;&gt;&lt;a href=&quot;#letsencrypt설정-server-apache-ssl-letscript-os-Windows10&quot; class=&quot;hea</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="letsencrypt설정-server-apache-ssl-letscript-os-Windows10"><a href="#letsencrypt설정-server-apache-ssl-letscript-os-Windows10" class="headerlink" title="letsencrypt설정(server: apache, ssl: letscript, os: Windows10)"></a>letsencrypt설정(server: apache, ssl: letscript, os: Windows10)</h1><h2 id="download"><a href="#download" class="headerlink" title="download"></a>download</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;apache</span><br><span class="line">https:&#x2F;&#x2F;httpd.apache.org&#x2F;download.cgi</span><br><span class="line">&#x2F;&#x2F;letsencrypt</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;PKISharp&#x2F;win-acme&#x2F;releases</span><br></pre></td></tr></table></figure><h4 id="위-사이트에서-v2-0-0-alpha2로-다운하였다"><a href="#위-사이트에서-v2-0-0-alpha2로-다운하였다" class="headerlink" title="위 사이트에서 v2.0.0-alpha2로 다운하였다."></a>위 사이트에서 v2.0.0-alpha2로 다운하였다.</h4><h4 id="생각보다-윈도우측-설정이-별로-없다-게다가-우리가-원하는-서버를-다-해보진-못했다-그저-apache설정만-해보았을-뿐…"><a href="#생각보다-윈도우측-설정이-별로-없다-게다가-우리가-원하는-서버를-다-해보진-못했다-그저-apache설정만-해보았을-뿐…" class="headerlink" title="생각보다 윈도우측 설정이 별로 없다. 게다가 우리가 원하는 서버를 다 해보진 못했다. 그저 apache설정만 해보았을 뿐…"></a>생각보다 윈도우측 설정이 별로 없다. 게다가 우리가 원하는 서버를 다 해보진 못했다. 그저 apache설정만 해보았을 뿐…</h4><h4 id="일단-apache를-다운받자-설치-및-설정은-본인이-하는-것"><a href="#일단-apache를-다운받자-설치-및-설정은-본인이-하는-것" class="headerlink" title="일단 apache를 다운받자. 설치 및 설정은 본인이 하는 것!"></a>일단 apache를 다운받자. 설치 및 설정은 본인이 하는 것!</h4><h2 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h2><h4 id="apache를-zip으로-다운받으면-windows니까-Apache24라는-폴더가-나온다-해당-폴더를-C-에-옮겨둔다"><a href="#apache를-zip으로-다운받으면-windows니까-Apache24라는-폴더가-나온다-해당-폴더를-C-에-옮겨둔다" class="headerlink" title="apache를 zip으로 다운받으면(windows니까) Apache24라는 폴더가 나온다. 해당 폴더를 C:에 옮겨둔다."></a>apache를 zip으로 다운받으면(windows니까) Apache24라는 폴더가 나온다. 해당 폴더를 C:에 옮겨둔다.</h4><h4 id="그담에-아까-받은-letsencrypt파일도-C-로-옮겨서-들어간다-그러면-해당-폴더의"><a href="#그담에-아까-받은-letsencrypt파일도-C-로-옮겨서-들어간다-그러면-해당-폴더의" class="headerlink" title="그담에 아까 받은 letsencrypt파일도 C:로 옮겨서 들어간다. 그러면 해당 폴더의"></a>그담에 아까 받은 letsencrypt파일도 C:로 옮겨서 들어간다. 그러면 해당 폴더의</h4><figure>    <a href="https://github.com/sherwher/sherwher.github.io/blob/master/img/letsencrypt_list.png">        <img src="../img/letsencrypt_list.png">    </a></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">settings.config.xml</span><br></pre></td></tr></table></figure><h4 id="위-파일이-나타난다-이-파일을-수정하자"><a href="#위-파일이-나타난다-이-파일을-수정하자" class="headerlink" title="위 파일이 나타난다. 이 파일을 수정하자"></a>위 파일이 나타난다. 이 파일을 수정하자</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;SavePrivateKeyPem&quot;</span> <span class="attr">serializeAs</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>False<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="위-부분을"><a href="#위-부분을" class="headerlink" title="위 부분을"></a>위 부분을</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;SavePrivateKeyPem&quot;</span> <span class="attr">serializeAs</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>True<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="아래-부분으로-변경해야-key파일이-떨어진다"><a href="#아래-부분으로-변경해야-key파일이-떨어진다" class="headerlink" title="아래 부분으로 변경해야 key파일이 떨어진다."></a>아래 부분으로 변경해야 key파일이 떨어진다.</h4><h4 id="설정은-wacs-exe를-관리자-권한으로-실행한다"><a href="#설정은-wacs-exe를-관리자-권한으로-실행한다" class="headerlink" title="설정은 wacs.exe를 관리자 권한으로 실행한다."></a>설정은 wacs.exe를 관리자 권한으로 실행한다.</h4><figure>    <a href="https://github.com/sherwher/sherwher.github.io/blob/master/img/SSL_Setting1.png">        <img src="../img/SSL_Setting1.png">    </a></figure>#### 사진과 같은 화면이 나타나면 M을 선택하여 새로운 Certificate를 생성#### 선택시 Manually input host names를 선택#### 그 이후 보안연결(https)을 사용할 도메인을 ,로 구별하여 나열하고 enter#### 다음 메뉴에서 Save file on local or network path를 선택하고 도메인이 사용할 ROOT주소(WAR가 배포된 실제 경로)를 입력<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">일반적으로 c:&#x2F;Apache24&#x2F;htdocs가 Root주소</span><br></pre></td></tr></table></figure><h4 id="위-상태이후-요구하는-입력을-입력하고-인증-절차를-완료하면-된다"><a href="#위-상태이후-요구하는-입력을-입력하고-인증-절차를-완료하면-된다" class="headerlink" title="위 상태이후 요구하는 입력을 입력하고 인증 절차를 완료하면 된다."></a>위 상태이후 요구하는 입력을 입력하고 인증 절차를 완료하면 된다.</h4><h4 id="인증이-끝난-경우"><a href="#인증이-끝난-경우" class="headerlink" title="인증이 끝난 경우"></a>인증이 끝난 경우</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\win-acme\acme-v02.api.letsencrypt.org\Certificates</span><br></pre></td></tr></table></figure><h4 id="위-경로에-Certificates파일이-생성된다"><a href="#위-경로에-Certificates파일이-생성된다" class="headerlink" title="위 경로에 Certificates파일이 생성된다."></a>위 경로에 Certificates파일이 생성된다.</h4><h4 id="SSL설정시-위-파일기준으로-설정하면-된다"><a href="#SSL설정시-위-파일기준으로-설정하면-된다" class="headerlink" title="SSL설정시 위 파일기준으로 설정하면 된다."></a>SSL설정시 위 파일기준으로 설정하면 된다.</h4><h2 id="apache설정"><a href="#apache설정" class="headerlink" title="apache설정"></a>apache설정</h2><h4 id="apache의-경우-SSL관련-설정이-추가로-필요한데"><a href="#apache의-경우-SSL관련-설정이-추가로-필요한데" class="headerlink" title="apache의 경우 SSL관련 설정이 추가로 필요한데"></a>apache의 경우 SSL관련 설정이 추가로 필요한데</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:&#x2F;Apache24&#x2F;conf&#x2F;httpd.conf</span><br></pre></td></tr></table></figure><h4 id="위-파일에-설정이-변경되어야한다"><a href="#위-파일에-설정이-변경되어야한다" class="headerlink" title="위 파일에 설정이 변경되어야한다."></a>위 파일에 설정이 변경되어야한다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule ssl_module modules&#x2F;mod_ssl.so</span><br></pre></td></tr></table></figure><p>위 부분의 주석을 해제하고</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule ssl_module&gt;</span><br><span class="line">Listen 443</span><br><span class="line">    &lt;VirtualHost *:443&gt;</span><br><span class="line">        ServerName &#123;설정한 domain&#125;</span><br><span class="line">        ServerAdmin &#123;admin 주소&#125;</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        SSLEngine on</span><br><span class="line">        SSLProtocol all -SSLv2 -SSLv3 </span><br><span class="line">        SSLCertificateFile C:&#x2F;ProgramData&#x2F;win-acme&#x2F;acme-v02.api.letsencrypt.org&#x2F;Certificates&#x2F;&#123;다다름&#125;-crt.pem</span><br><span class="line">        SSLCertificateKeyFile C:&#x2F;ProgramData&#x2F;win-acme&#x2F;acme-v02.api.letsencrypt.org&#x2F;Certificates&#x2F;&#123;다다름&#125;-key.pem</span><br><span class="line">        SSLCertificateChainFile C:&#x2F;ProgramData&#x2F;win-acme&#x2F;acme-v02.api.letsencrypt.org&#x2F;Certificates&#x2F;ca-&#123;다다름&#125;-chain.pem</span><br><span class="line">        SSLCACertificateFile C:&#x2F;ProgramData&#x2F;win-acme&#x2F;acme-v02.api.letsencrypt.org&#x2F;Certificates&#x2F;ca-&#123;다다름&#125;-crt.pem</span><br><span class="line">        </span><br><span class="line">        DocumentRoot &quot;c:&#x2F;Apache24&#x2F;htdocs&quot;</span><br><span class="line">    &lt;&#x2F;VirtualHost&gt;</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><h4 id="위-IfModule-부분안에-내용을-제거하고-위-처럼-입력한다-각자-내용이-다르니-각자-채우시길…-다다름-부분은-발급받은-키값으로-되어있을-것이다"><a href="#위-IfModule-부분안에-내용을-제거하고-위-처럼-입력한다-각자-내용이-다르니-각자-채우시길…-다다름-부분은-발급받은-키값으로-되어있을-것이다" class="headerlink" title="위 IfModule 부분안에 내용을 제거하고 위 처럼 입력한다. 각자 내용이 다르니 각자 채우시길…{다다름}부분은 발급받은 키값으로 되어있을 것이다."></a>위 IfModule 부분안에 내용을 제거하고 위 처럼 입력한다. 각자 내용이 다르니 각자 채우시길…{다다름}부분은 발급받은 키값으로 되어있을 것이다.</h4><h4 id="키-매핑하는게-제일-헷갈려서-자세히-적어봤다"><a href="#키-매핑하는게-제일-헷갈려서-자세히-적어봤다" class="headerlink" title="키 매핑하는게 제일 헷갈려서 자세히 적어봤다."></a>키 매핑하는게 제일 헷갈려서 자세히 적어봤다.</h4><h4 id="위-설정이-끝나면-Apache를-재시동하고"><a href="#위-설정이-끝나면-Apache를-재시동하고" class="headerlink" title="위 설정이 끝나면 Apache를 재시동하고"></a>위 설정이 끝나면 Apache를 재시동하고</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.sslshopper.com&#x2F;ssl-checker.html</span><br></pre></td></tr></table></figure><h4 id="위-주소에서-도메인을-입력해서-https가-되는지-확인해보면-된다"><a href="#위-주소에서-도메인을-입력해서-https가-되는지-확인해보면-된다" class="headerlink" title="위 주소에서 도메인을 입력해서 https가 되는지 확인해보면 된다."></a>위 주소에서 도메인을 입력해서 https가 되는지 확인해보면 된다.</h4><h2 id="추가"><a href="#추가" class="headerlink" title="추가"></a>추가</h2><h4 id="http연결을-https로-무조건-변경하고-싶을때가-있을-것이다-이럴땐"><a href="#http연결을-https로-무조건-변경하고-싶을때가-있을-것이다-이럴땐" class="headerlink" title="http연결을 https로 무조건 변경하고 싶을때가 있을 것이다. 이럴땐"></a>http연결을 https로 무조건 변경하고 싶을때가 있을 것이다. 이럴땐</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Listen 80</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName &#123;설정한 domain&#125;</span><br><span class="line">Redirect &#x2F; https:&#x2F;&#x2F;&#123;설정한 domain&#125;&#x2F;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><h4 id="Listen-80부분아래-위-설정을-추가한다-그러면-http로-들어온-요청을-https로-redirect-시켜준다"><a href="#Listen-80부분아래-위-설정을-추가한다-그러면-http로-들어온-요청을-https로-redirect-시켜준다" class="headerlink" title="Listen 80부분아래 위 설정을 추가한다. 그러면 http로 들어온 요청을 https로 redirect 시켜준다."></a>Listen 80부분아래 위 설정을 추가한다. 그러면 http로 들어온 요청을 https로 redirect 시켜준다.</h4>]]></content:encoded>
      
      
      <category domain="http://sherwher.github.io/categories/ETC/">ETC</category>
      
      <category domain="http://sherwher.github.io/categories/ETC/Letsencrypt/">Letsencrypt</category>
      
      
      <category domain="http://sherwher.github.io/tags/post/">post</category>
      
      <category domain="http://sherwher.github.io/tags/ssl/">ssl</category>
      
      <category domain="http://sherwher.github.io/tags/freessl/">freessl</category>
      
      <category domain="http://sherwher.github.io/tags/letsencrypt/">letsencrypt</category>
      
      <category domain="http://sherwher.github.io/tags/windows/">windows</category>
      
      <category domain="http://sherwher.github.io/tags/apache/">apache</category>
      
      
      <comments>http://sherwher.github.io/2021/04/21/LetsencryptSettingOnWindows(feat.Apache)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BabyPhoto 개인정보 처리방침</title>
      <link>http://sherwher.github.io/2021/04/21/BabyPhoto%20%EA%B0%9C%EC%9D%B8%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%B9%A8/</link>
      <guid>http://sherwher.github.io/2021/04/21/BabyPhoto%20%EA%B0%9C%EC%9D%B8%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%B9%A8/</guid>
      <pubDate>Wed, 21 Apr 2021 05:41:35 GMT</pubDate>
      
        
        
      <description>&lt;ol&gt;
&lt;li&gt;개인정보의 처리 목적 (‘&lt;a href=&quot;https://sherwher.github.io/%E2%80%99%EC%9D%B4%ED%95%98&quot;&gt;https://sherwher.github.io/’이하&lt;/a&gt; ‘babyphoto’) 은(는)</description>
        
      
      
      
      <content:encoded><![CDATA[<ol><li>개인정보의 처리 목적 (‘<a href="https://sherwher.github.io/%E2%80%99%EC%9D%B4%ED%95%98">https://sherwher.github.io/’이하</a> ‘babyphoto’) 은(는) 다음의 목적을 위하여 개인정보를 처리하고 있으며, 다음의 목적 이외의 용도로는 이용하지 않습니다.</li></ol><ul><li>고객 가입의사 확인, 고객에 대한 서비스 제공에 따른 본인 식별.인증, 회원자격 유지.관리, 물품 또는 서비스 공급에 따른 금액 결제, 물품 또는 서비스의 공급.배송 등</li></ul><ol start="2"><li>개인정보의 처리 및 보유 기간</li></ol><p>① (‘<a href="https://sherwher.github.io/%E2%80%99%EC%9D%B4%ED%95%98">https://sherwher.github.io/’이하</a> ‘babyphoto’) 은(는) 정보주체로부터 개인정보를 수집할 때 동의 받은 개인정보 보유․이용기간 또는 법령에 따른 개인정보 보유․이용기간 내에서 개인정보를 처리․보유합니다.</p><p>② 구체적인 개인정보 처리 및 보유 기간은 다음과 같습니다.<br>☞ 아래 예시를 참고하여 개인정보 처리업무와 개인정보 처리업무에 대한 보유기간 및 관련 법령, 근거 등을 기재합니다.<br>(예시)- 고객 가입 및 관리 : 서비스 이용계약 또는 회원가입 해지시까지, 다만 채권․채무관계 잔존시에는 해당 채권․채무관계 정산시까지</p><ul><li>전자상거래에서의 계약․청약철회, 대금결제, 재화 등 공급기록 : 5년</li></ul><ol start="3"><li>개인정보의 제3자 제공에 관한 사항</li></ol><p>① (‘<a href="https://sherwher.github.io/&#39;%EC%9D%B4%ED%95%98">https://sherwher.github.io/&#39;이하</a> ‘babyphoto’)은(는) 정보주체의 동의, 법률의 특별한 규정 등 개인정보 보호법 제17조 및 제18조에 해당하는 경우에만 개인정보를 제3자에게 제공합니다.</p><p>② (‘<a href="https://sherwher.github.io/&#39;)%EC%9D%80(%EB%8A%94)">https://sherwher.github.io/&#39;)은(는)</a> 다음과 같이 개인정보를 제3자에게 제공하고 있습니다.</p><p>1.</p><ul><li>개인정보를 제공받는 자 : HoultLee</li><li>제공받는 자의 개인정보 이용목적 : 로그인ID, 이름, 사진</li><li>제공받는 자의 보유.이용기간: 3년</li></ul><ol start="4"><li>개인정보처리 위탁</li></ol><p>① (‘babyphoto’)은(는) 원활한 개인정보 업무처리를 위하여 다음과 같이 개인정보 처리업무를 위탁하고 있습니다.</p><ol><li>&lt;개인정보처리의 위탁&gt;</li></ol><ul><li>위탁받는 자 (수탁자) : BabyPhoto</li><li>위탁하는 업무의 내용 : 영상정보처리기기 운영</li><li>위탁기간 : 3년</li></ul><p>② (‘<a href="https://sherwher.github.io/&#39;%EC%9D%B4%ED%95%98">https://sherwher.github.io/&#39;이하</a> ‘babyphoto’)은(는) 위탁계약 체결시 개인정보 보호법 제25조에 따라 위탁업무 수행목적 외 개인정보 처리금지, 기술적․관리적 보호조치, 재위탁 제한, 수탁자에 대한 관리․감독, 손해배상 등 책임에 관한 사항을 계약서 등 문서에 명시하고, 수탁자가 개인정보를 안전하게 처리하는지를 감독하고 있습니다.</p><p>③ 위탁업무의 내용이나 수탁자가 변경될 경우에는 지체없이 본 개인정보 처리방침을 통하여 공개하도록 하겠습니다.<br>5. 정보주체와 법정대리인의 권리·의무 및 그 행사방법 이용자는 개인정보주체로써 다음과 같은 권리를 행사할 수 있습니다.</p><p>① 정보주체는 BabyPhoto(‘<a href="https://sherwher.github.io/%E2%80%99%EC%9D%B4%ED%95%98">https://sherwher.github.io/’이하</a> ‘babyphoto) 에 대해 언제든지 다음 각 호의 개인정보 보호 관련 권리를 행사할 수 있습니다.</p><ol><li>개인정보 열람요구</li><li>오류 등이 있을 경우 정정 요구</li><li>삭제요구</li><li>처리정지 요구</li></ol><ol start="6"><li>처리하는 개인정보의 항목 작성</li></ol><p>① (‘<a href="https://sherwher.github.io/&#39;%EC%9D%B4%ED%95%98">https://sherwher.github.io/&#39;이하</a> ‘babyphoto’)은(는) 다음의 개인정보 항목을 처리하고 있습니다.</p><p>1&lt;개인정보 처리&gt;</p><ul><li>필수항목 : 로그인ID, 이름, 사진</li><li>선택항목 :</li></ul><ol start="7"><li>개인정보의 파기(‘babyphoto’)은(는) 원칙적으로 개인정보 처리목적이 달성된 경우에는 지체없이 해당 개인정보를 파기합니다. 파기의 절차, 기한 및 방법은 다음과 같습니다.</li></ol><p>-파기절차<br>이용자가 입력한 정보는 목적 달성 후 별도의 DB에 옮겨져(종이의 경우 별도의 서류) 내부 방침 및 기타 관련 법령에 따라 일정기간 저장된 후 혹은 즉시 파기됩니다. 이 때, DB로 옮겨진 개인정보는 법률에 의한 경우가 아니고서는 다른 목적으로 이용되지 않습니다.</p><p>-파기기한<br>이용자의 개인정보는 개인정보의 보유기간이 경과된 경우에는 보유기간의 종료일로부터 5일 이내에, 개인정보의 처리 목적 달성, 해당 서비스의 폐지, 사업의 종료 등 그 개인정보가 불필요하게 되었을 때에는 개인정보의 처리가 불필요한 것으로 인정되는 날로부터 5일 이내에 그 개인정보를 파기합니다.</p><ol start="8"><li>개인정보 자동 수집 장치의 설치•운영 및 거부에 관한 사항</li></ol><p>① BabyPhoto 은 개별적인 맞춤서비스를 제공하기 위해 이용정보를 저장하고 수시로 불러오는 ‘쿠기(cookie)’를 사용합니다. ② 쿠키는 웹사이트를 운영하는데 이용되는 서버(http)가 이용자의 컴퓨터 브라우저에게 보내는 소량의 정보이며 이용자들의 PC 컴퓨터내의 하드디스크에 저장되기도 합니다. 가. 쿠키의 사용 목적 : 이용자가 방문한 각 서비스와 웹 사이트들에 대한 방문 및 이용형태, 인기 검색어, 보안접속 여부, 등을 파악하여 이용자에게 최적화된 정보 제공을 위해 사용됩니다. 나. 쿠키의 설치•운영 및 거부 : 웹브라우저 상단의 도구&gt;인터넷 옵션&gt;개인정보 메뉴의 옵션 설정을 통해 쿠키 저장을 거부 할 수 있습니다. 다. 쿠키 저장을 거부할 경우 맞춤형 서비스 이용에 어려움이 발생할 수 있습니다.</p><ol start="9"><li>개인정보 보호책임자 작성</li></ol><p>① BabyPhoto(‘<a href="https://sherwher.github.io/%E2%80%99%EC%9D%B4%ED%95%98">https://sherwher.github.io/’이하</a> ‘babyphoto) 은(는) 개인정보 처리에 관한 업무를 총괄해서 책임지고, 개인정보 처리와 관련한 정보주체의 불만처리 및 피해구제 등을 위하여 아래와 같이 개인정보 보호책임자를 지정하고 있습니다.</p><p>▶ 개인정보 보호책임자<br>성명 :이성근<br>직책 :대표<br>직급 :대표<br>연락처 :01027058011, <a href="mailto:&#115;&#104;&#101;&#x72;&#119;&#x68;&#x65;&#114;&#64;&#x73;&#104;&#101;&#x72;&#x77;&#104;&#101;&#114;&#46;&#111;&#x72;&#x67;">&#115;&#104;&#101;&#x72;&#119;&#x68;&#x65;&#114;&#64;&#x73;&#104;&#101;&#x72;&#x77;&#104;&#101;&#114;&#46;&#111;&#x72;&#x67;</a>,<br>※ 개인정보 보호 담당부서로 연결됩니다.</p><p>▶ 개인정보 보호 담당부서<br>부서명 :개인<br>담당자 :이성근<br>연락처 :01027058011, <a href="mailto:&#x73;&#x68;&#101;&#x72;&#119;&#x68;&#101;&#114;&#64;&#115;&#104;&#101;&#x72;&#119;&#104;&#x65;&#x72;&#46;&#x6f;&#x72;&#103;">&#x73;&#x68;&#101;&#x72;&#119;&#x68;&#101;&#114;&#64;&#115;&#104;&#101;&#x72;&#119;&#104;&#x65;&#x72;&#46;&#x6f;&#x72;&#103;</a>,<br>② 정보주체께서는 BabyPhoto(‘<a href="https://sherwher.github.io/%E2%80%99%EC%9D%B4%ED%95%98">https://sherwher.github.io/’이하</a> ‘babyphoto) 의 서비스(또는 사업)을 이용하시면서 발생한 모든 개인정보 보호 관련 문의, 불만처리, 피해구제 등에 관한 사항을 개인정보 보호책임자 및 담당부서로 문의하실 수 있습니다. BabyPhoto(‘<a href="https://sherwher.github.io/%E2%80%99%EC%9D%B4%ED%95%98">https://sherwher.github.io/’이하</a> ‘babyphoto) 은(는) 정보주체의 문의에 대해 지체 없이 답변 및 처리해드릴 것입니다.</p><ol start="10"><li>개인정보 처리방침 변경</li></ol><p>①이 개인정보처리방침은 시행일로부터 적용되며, 법령 및 방침에 따른 변경내용의 추가, 삭제 및 정정이 있는 경우에는 변경사항의 시행 7일 전부터 공지사항을 통하여 고지할 것입니다.</p><ol start="11"><li><p>개인정보의 안전성 확보 조치 (‘babyphoto’)은(는) 개인정보보호법 제29조에 따라 다음과 같이 안전성 확보에 필요한 기술적/관리적 및 물리적 조치를 하고 있습니다.</p></li><li><p>개인정보 취급 직원의 최소화 및 교육<br>개인정보를 취급하는 직원을 지정하고 담당자에 한정시켜 최소화 하여 개인정보를 관리하는 대책을 시행하고 있습니다.</p></li><li><p>개인정보에 대한 접근 제한<br>개인정보를 처리하는 데이터베이스시스템에 대한 접근권한의 부여,변경,말소를 통하여 개인정보에 대한 접근통제를 위하여 필요한 조치를 하고 있으며 침입차단시스템을 이용하여 외부로부터의 무단 접근을 통제하고 있습니다.</p></li><li><p>문서보안을 위한 잠금장치 사용<br>개인정보가 포함된 서류, 보조저장매체 등을 잠금장치가 있는 안전한 장소에 보관하고 있습니다.</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://sherwher.github.io/categories/%EA%B0%9C%EC%9D%B8%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">개인프로젝트</category>
      
      <category domain="http://sherwher.github.io/categories/%EA%B0%9C%EC%9D%B8%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/BabyPhoto/">BabyPhoto</category>
      
      
      <category domain="http://sherwher.github.io/tags/post/">post</category>
      
      <category domain="http://sherwher.github.io/tags/react-native/">react-native</category>
      
      <category domain="http://sherwher.github.io/tags/golang/">golang</category>
      
      
      <comments>http://sherwher.github.io/2021/04/21/BabyPhoto%20%EA%B0%9C%EC%9D%B8%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%B9%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MYSQL Replication을 이용한 scale out처리(feat. haproxy)</title>
      <link>http://sherwher.github.io/2019/11/25/MYSQL%20Replication%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20scale%20out%EC%B2%98%EB%A6%AC(feat.%20haproxy)/</link>
      <guid>http://sherwher.github.io/2019/11/25/MYSQL%20Replication%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20scale%20out%EC%B2%98%EB%A6%AC(feat.%20haproxy)/</guid>
      <pubDate>Mon, 25 Nov 2019 05:50:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-구조&quot;&gt;&lt;a href=&quot;#1-구조&quot; class=&quot;headerlink&quot; title=&quot;1. 구조&quot;&gt;&lt;/a&gt;1. 구조&lt;/h1&gt;&lt;h3 id=&quot;MYSQL-5-1이상&quot;&gt;&lt;a href=&quot;#MYSQL-5-1이상&quot; class=&quot;headerlink&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-구조"><a href="#1-구조" class="headerlink" title="1. 구조"></a>1. 구조</h1><h3 id="MYSQL-5-1이상"><a href="#MYSQL-5-1이상" class="headerlink" title="MYSQL 5.1이상"></a>MYSQL 5.1이상</h3><h3 id="haproxy"><a href="#haproxy" class="headerlink" title="haproxy"></a>haproxy</h3><h1 id="2-사용"><a href="#2-사용" class="headerlink" title="2. 사용"></a>2. 사용</h1><h3 id="mysql의-mater-slave구조-mysql-replication-사용"><a href="#mysql의-mater-slave구조-mysql-replication-사용" class="headerlink" title="mysql의 mater - slave구조(mysql replication)사용"></a>mysql의 mater - slave구조(mysql replication)사용</h3><h3 id="haproxy로-dml은-master로-select는-slave로-분산처리-gt-roundrobin방식사용"><a href="#haproxy로-dml은-master로-select는-slave로-분산처리-gt-roundrobin방식사용" class="headerlink" title="haproxy로 dml은 master로, select는 slave로 분산처리 -&gt; roundrobin방식사용"></a>haproxy로 dml은 master로, select는 slave로 분산처리 -&gt; roundrobin방식사용</h3><h3 id="TEST를-위해-Docker사용"><a href="#TEST를-위해-Docker사용" class="headerlink" title="*TEST를 위해 Docker사용"></a>*TEST를 위해 Docker사용</h3><pre><code>master : 기본포트 3306slave : 3307slave1 : 3308slave2 : 3309slave3 : 다른서버 3306haproxy     dml : 3336 select : 3326</code></pre><h2 id="1-MYSQL-REPLICATION-Setting"><a href="#1-MYSQL-REPLICATION-Setting" class="headerlink" title="1. MYSQL REPLICATION Setting"></a>1. MYSQL REPLICATION Setting</h2><p>docker를 이용했기때문에 도커부분은 제외하시고 생각하시면 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;Docker&#x2F;mysql&#x2F;master&#x2F;config_file.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">server-id &#x3D; 1</span><br></pre></td></tr></table></figure><ul><li>default_authentication_plugin설정을 한 이유는 다른 서버에서 마스터 서버를 바라볼때 패스워드 에러가 나옴. 이처리 방법은 찾는중.</li><li>docker에 mysql이미지를 받으면 vi가 실행되지않음. sudo apt-get update이후 apt-get으로 vim을 설치하면 가능하나 apt-get update가 너무 오래걸려서 설정파일을 만들고 넘기는 방식으로 처리.</li><li>log-bin은 업데이트되는 모든 query들을 바이너리 파일에 로그로 남기겠다는 의미이다. 기본적으로 바이너리 파일은 MYSQL의 datadir인 /var/lib/mysql/에 호스트명-bin.000001, 호스트명-bin.000002형태로 생성됨.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;Docker&#x2F;mysql&#x2F;slave&#x2F;config_file.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password</span><br><span class="line">server-id &#x3D; 2</span><br><span class="line">slave-skip-errors&#x3D;all</span><br></pre></td></tr></table></figure><ul><li>server-id는 master를 포함하여 각각 고유값으로 주면된다.</li></ul><p>이제 docker container를 올린다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; master</span><br><span class="line">$ docker run --name master -p 3306:3306 -v &#x2F;Docker&#x2F;mysql&#x2F;master:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;master -d mysql</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; slave</span><br><span class="line">$ docker run --name slave -p 3307:3306 -v &#x2F;Docker&#x2F;mysql&#x2F;slave:&#x2F;etc&#x2F;mysql&#x2F;conf.d --link master -e MYSQL_ROOT_PASSWORD&#x3D;slave -d mysql</span><br></pre></td></tr></table></figure><ul><li>container 3306포트에 호스트의 3306을 연결시킴.</li><li>docker 내부에서 내부의 master와 slave를 연결하기에 slave는 실행할때 master를 link시킴.</li></ul><p>이제 docker exec명령을 사용해 master에 접속</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it master &#x2F;bin&#x2F;bash</span><br><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure><p>그리고 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW MASTER STATUS\G</span><br></pre></td></tr></table></figure><p>위 명령어 입력시 결과가 아래와 같다면 .cnf파일의 설정이 잘 적용된 것.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">             File: mysql-bin.000003</span><br><span class="line">         Position: 5779</span><br><span class="line">     Binlog_Do_DB:</span><br><span class="line"> Binlog_Ignore_DB:</span><br><span class="line">Executed_Gtid_Set:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>이제 slave서버에서 접근이 가능하도록 master서버에 replication slave권한을 가진 User계정을 하나 생성해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#39;repluser&#39;@&#39;%&#39; IDENTIFIED BY &#39;repluser&#39;;</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &#39;repluser&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure><p>user 테이블을 확인하여 user가 생성되었는지 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE mysql;</span><br><span class="line">mysql&gt; SELECT user, host FROM user;</span><br></pre></td></tr></table></figure><p>Replication할 테이블을 생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE repldb;</span><br><span class="line">mysql&gt; USE repldb;</span><br><span class="line">mysql&gt; CREATE TABLE repltable(no INT(8), PRIMARY KEY(no))</span><br><span class="line">mysql&gt; DESC repltable;</span><br></pre></td></tr></table></figure><p>그 후 master서버의 database를 dump한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; exit</span><br><span class="line">$ mysqldump -u root -p repldb &gt; dump.sql</span><br><span class="line">$ exit</span><br></pre></td></tr></table></figure><p>dump한 파일을 내 호스트PC로 복사</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp master:dump.sql .</span><br></pre></td></tr></table></figure><p>slave 서버에서 dump한 파일 불러오기</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp dump.sql slave:.</span><br><span class="line">$ docker exec -it slave &#x2F;bin&#x2F;bash</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE DATABASE repldb;</span><br><span class="line">mysql&gt; exit</span><br><span class="line">$ mysql -u root -p repldb &lt; dump.sql</span><br></pre></td></tr></table></figure><p>이제 dump한 파일이 잘 들어갔나 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; USE repldb;</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br></pre></td></tr></table></figure><p>repltable이 생성되었다면 정상적으로 복구된 것.</p><p>이제 master와 연동하는 작업을 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; master server</span><br><span class="line">mysql&gt; SHOW MASTER STATUS\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">             File: mysql-bin.000003</span><br><span class="line">         Position: 5779</span><br><span class="line">     Binlog_Do_DB:</span><br><span class="line"> Binlog_Ignore_DB:</span><br><span class="line">Executed_Gtid_Set:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>출력된 값의 File과 Position을 기억하면된다.<br>해당 File과 Position기준으로 파일을 읽기시작한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;slave server</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST&#x3D;&#39;master&#39;, MASTER_USER&#x3D;&#39;repluser&#39;, MASTER_PASSWORD&#x3D;&#39;repluser&#39;, MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000003&#39;, MASTER_LOG_POS&#x3D;5779;</span><br><span class="line">mysql&gt; START SLAVE;</span><br></pre></td></tr></table></figure><ul><li>MASTER_HOST : master서버의 호스트명(IP)</li><li>MASTER_USER : mysql서버의 mysql에서 Replication Slave권한을 가진 User의 계정명</li><li>MASTER_PASSWORD : master서버의 myql에서 Replication Slave권을 가진 User의 계정의 비밀번호</li><li>MASTER_LOG_FILE : master서버의 바이너리 로그 파일명</li><li>MASTER_LOG_POS : master 서버의 현재 로그의 위치<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW SLAVLE STATUS \G</span><br></pre></td></tr></table></figure></li><li>Last_Error, Last_IO_Error 필드에 아무 값도 없으며 성공</li></ul><p>Replication 테스트하기</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; master server</span><br><span class="line">mysql&gt; USE repldb;</span><br><span class="line">mysql&gt; INSERT INTO repltable VALUES(1);</span><br><span class="line">mysql&gt; SELECT * FROM repltable;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; slave server</span><br><span class="line">mysql&gt; USE repldb;</span><br><span class="line">mysql&gt; SELECT * FROM repltable;</span><br></pre></td></tr></table></figure><p>값이 정상적으로 나올시 정상 구동 되는 것입니다.</p><h2 id="2-HAPROXY-Setting"><a href="#2-HAPROXY-Setting" class="headerlink" title="2. HAPROXY Setting"></a>2. HAPROXY Setting</h2><p>자원이 많지 않기때문에 haproxy 역시 도커에 올린다.<br>haproxy를 docker에서 사용하려며 Dockerfile을 만들어야한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Docker&#x2F;haproxy&#x2F;Dockerfile</span><br><span class="line">FROM haproxy:1.7</span><br><span class="line">COPY haproxy.cfg &#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg</span><br></pre></td></tr></table></figure><p>이제 haproxy.cfg파일을 생성한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Docker&#x2F;haproxy&#x2F;haproxy.cfg</span><br><span class="line"></span><br><span class="line">frontend mysql-select</span><br><span class="line">        bind *:3326</span><br><span class="line">        default_backend select</span><br><span class="line">backend select</span><br><span class="line">        balance roundrobin</span><br><span class="line">        server slave 111.111.111.111:3307  check</span><br><span class="line">        server slave1 111.111.111.111:3308  check</span><br><span class="line">        server slave2 111.111.111.111:3309  check</span><br><span class="line">        server slave3 222.222.222.222:3306 check</span><br><span class="line"></span><br><span class="line">frontend mysql-dml</span><br><span class="line">        bind *:3336</span><br><span class="line">        default_backend dml</span><br><span class="line">backend dml</span><br><span class="line">        balance roundrobin</span><br><span class="line">        server master 111.111.111.111:3306  check</span><br></pre></td></tr></table></figure><ul><li><p>현재 구성이 slave ~ slave2까지 같은 host에 존재하고 docker로 포트만 연결해둔 상태라 위처럼 보여지고 slave3의 경우 다른 서버에서 docker로 올린상태이다.</p></li><li><p>dml관련해서 3306에 docker로 돌아가는 master서버로 접근하게 한다.</p></li></ul><p>이제 Dockerfile을 빌드한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t proxy &#x2F;Docker&#x2F;haproxy</span><br></pre></td></tr></table></figure><p>그리고 도커를 실행시킨다. 실행시 설정한 3326포트와 3336포트를 proxy에 전달해야한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 3326:3326 -p 3336:3336 --name haproxy proxy</span><br></pre></td></tr></table></figure><p>이제 master database에 proxy전용 user를 셋팅한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it master &#x2F;bin&#x2F;bash</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; USE mysql;</span><br><span class="line">mysql&gt; INSERT INTO user(host, user) VALUES(&#39;%&#39;, &#39;haproxy_check&#39;);</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>이제 셋팅은 완료되었다. 테스트만 해보면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -h 111.111.111.111 -u haproxy_check -p -P 3326 -e &quot;SHOW VARIABLES LIKE &#39;server_id&#39;&quot;</span><br></pre></td></tr></table></figure><p>위처럼 테스트했을시 서버 id가 바뀌면 select는 완료된 것이다.<br>master역시 같은 방법으로 테스트시 결과가 리턴되면 완료된 것이다.</p>]]></content:encoded>
      
      
      <category domain="http://sherwher.github.io/categories/DataBase/">DataBase</category>
      
      <category domain="http://sherwher.github.io/categories/DataBase/MySQL/">MySQL</category>
      
      
      <category domain="http://sherwher.github.io/tags/post/">post</category>
      
      <category domain="http://sherwher.github.io/tags/mysql/">mysql</category>
      
      <category domain="http://sherwher.github.io/tags/mysqlreplication/">mysqlreplication</category>
      
      <category domain="http://sherwher.github.io/tags/scaleout/">scaleout</category>
      
      <category domain="http://sherwher.github.io/tags/haproxy/">haproxy</category>
      
      
      <comments>http://sherwher.github.io/2019/11/25/MYSQL%20Replication%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20scale%20out%EC%B2%98%EB%A6%AC(feat.%20haproxy)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ReactWithSpringBoot-리엑트, 스프링부트 연동2</title>
      <link>http://sherwher.github.io/2019/11/25/ReactWithSpringBoot-%EB%A6%AC%EC%97%91%ED%8A%B8,%20%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%20%EC%97%B0%EB%8F%992/</link>
      <guid>http://sherwher.github.io/2019/11/25/ReactWithSpringBoot-%EB%A6%AC%EC%97%91%ED%8A%B8,%20%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%20%EC%97%B0%EB%8F%992/</guid>
      <pubDate>Mon, 25 Nov 2019 05:50:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-Deploy-jar&quot;&gt;&lt;a href=&quot;#React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-De</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-Deploy-jar"><a href="#React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-Deploy-jar" class="headerlink" title="React와 SpringBoot연동(Frontend: React, Backend: SpringBoot, Deploy: jar)"></a>React와 SpringBoot연동(Frontend: React, Backend: SpringBoot, Deploy: jar)</h1><h3 id="실제-개발-진행-후-올렸을때-각-페이지로-직접-접근하는-방법"><a href="#실제-개발-진행-후-올렸을때-각-페이지로-직접-접근하는-방법" class="headerlink" title="실제 개발 진행 후 올렸을때 각 페이지로 직접 접근하는 방법."></a>실제 개발 진행 후 올렸을때 각 페이지로 직접 접근하는 방법.</h3><h4 id="SPA의-형태로-개발하였지만-경우-따라-각각-다른-페이지에-직접-접근해야하는-경우가-있다-이-경우-http-localhost-8080-xxx-형식으로-호출하면-controller가-참조하고-404에러를-뱉어낸다-이때-설정-필요한-설정이다"><a href="#SPA의-형태로-개발하였지만-경우-따라-각각-다른-페이지에-직접-접근해야하는-경우가-있다-이-경우-http-localhost-8080-xxx-형식으로-호출하면-controller가-참조하고-404에러를-뱉어낸다-이때-설정-필요한-설정이다" class="headerlink" title="SPA의 형태로 개발하였지만 경우 따라 각각 다른 페이지에 직접 접근해야하는 경우가 있다. 이 경우 http://localhost:8080/xxx 형식으로 호출하면 controller가 참조하고 404에러를 뱉어낸다. 이때 설정 필요한 설정이다."></a>SPA의 형태로 개발하였지만 경우 따라 각각 다른 페이지에 직접 접근해야하는 경우가 있다. 이 경우 <a href="http://localhost:8080/xxx">http://localhost:8080/xxx</a> 형식으로 호출하면 controller가 참조하고 404에러를 뱉어낸다. 이때 설정 필요한 설정이다.</h4><p>사전에 React-Router설정을 해야합니다. 설치는</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure><p>App.js에서 router설정을 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link, Switch &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">&quot;./main/Page1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">&quot;./main/Page2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;Router&gt;</span><br><span class="line">                &lt;Route</span><br><span class="line">                    render=&#123;<span class="function">(<span class="params">&#123; location &#125;</span>) =&gt;</span> (</span><br><span class="line">                        &lt;Switch location=&#123;location&#125;&gt;</span><br><span class="line">                            &lt;Route path=<span class="string">&quot;/page1&quot;</span> component=&#123;Page1&#125; /&gt;</span><br><span class="line">                            &lt;Route path=<span class="string">&quot;/page2&quot;</span> component=&#123;Page2&#125; /&gt;</span><br><span class="line">                        &lt;/Switch&gt;</span><br><span class="line">                    )&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">            &lt;/Router&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>라우터 설정을 한 경우 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:3000&#x2F;page1</span><br><span class="line">http:&#x2F;&#x2F;localhost:3000&#x2F;page2</span><br></pre></td></tr></table></figure><p>각각의 페이지로 접근이 가능합니다.</p><p>이제 controller에서 처리를 해야합니다. 실제 jar나 war로 묶이게 되면 port가 하나로 고정되고 controller가 우선순위를 타게됩니다. 하지만 해당하는 주소의 요청을 처리하는 controller가 없기때문에 404페이지가 나오게 됩니다.</p><p>저의 경우 PageController.java를 따로 생성하였습니다.</p><p>PageController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/page1&quot;, &quot;/page2&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 처럼 모든 요청을 index.html로 내려줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;page1</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;page2</span><br></pre></td></tr></table></figure><p>테스트를 실행하시면 각각의 페이지로 접근되는 것을 확인할 수 있습니다.</p><p>또한 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;page1?a&#x3D;123&amp;b&#x3D;123</span><br></pre></td></tr></table></figure><p>위 형태에서 queryString도 그대로 사용이 가능합니다.</p><h3 id="그렇다면-index-html-frontend-public-index-html-는-하나인데-index-html의-title은-어떻게-설정할까"><a href="#그렇다면-index-html-frontend-public-index-html-는-하나인데-index-html의-title은-어떻게-설정할까" class="headerlink" title="그렇다면 index.html(frontend/public/index.html)는 하나인데 index.html의 title은 어떻게 설정할까?"></a>그렇다면 index.html(frontend/public/index.html)는 하나인데 index.html의 title은 어떻게 설정할까?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&quot;Page1입니다.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 처럼 설정하면 해당 페이지 호출시 title이 변경된다.</p>]]></content:encoded>
      
      
      <category domain="http://sherwher.github.io/categories/JAVA/">JAVA</category>
      
      <category domain="http://sherwher.github.io/categories/JAVA/SpringBoot/">SpringBoot</category>
      
      <category domain="http://sherwher.github.io/categories/JAVA/SpringBoot/react/">react</category>
      
      
      <category domain="http://sherwher.github.io/tags/post/">post</category>
      
      <category domain="http://sherwher.github.io/tags/mysql/">mysql</category>
      
      <category domain="http://sherwher.github.io/tags/mysqlreplication/">mysqlreplication</category>
      
      <category domain="http://sherwher.github.io/tags/scaleout/">scaleout</category>
      
      <category domain="http://sherwher.github.io/tags/haproxy/">haproxy</category>
      
      
      <comments>http://sherwher.github.io/2019/11/25/ReactWithSpringBoot-%EB%A6%AC%EC%97%91%ED%8A%B8,%20%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%20%EC%97%B0%EB%8F%992/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ReactWithSpringBoot-리엑트, 스프링부트 연동</title>
      <link>http://sherwher.github.io/2018/12/26/ReactWithSpringBoot-%EB%A6%AC%EC%97%91%ED%8A%B8,%20%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%20%EC%97%B0%EB%8F%99/</link>
      <guid>http://sherwher.github.io/2018/12/26/ReactWithSpringBoot-%EB%A6%AC%EC%97%91%ED%8A%B8,%20%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%20%EC%97%B0%EB%8F%99/</guid>
      <pubDate>Wed, 26 Dec 2018 06:56:06 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-Deploy-jar&quot;&gt;&lt;a href=&quot;#React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-De</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-Deploy-jar"><a href="#React와-SpringBoot연동-Frontend-React-Backend-SpringBoot-Deploy-jar" class="headerlink" title="React와 SpringBoot연동(Frontend: React, Backend: SpringBoot, Deploy: jar)"></a>React와 SpringBoot연동(Frontend: React, Backend: SpringBoot, Deploy: jar)</h1><h3 id="Window기준으로-작성되었습니다"><a href="#Window기준으로-작성되었습니다" class="headerlink" title="Window기준으로 작성되었습니다."></a>Window기준으로 작성되었습니다.</h3><h5 id="window기준으로-mvn이-먹히지-않을경우-mvnw로-변경하여-돌리시면-됩니다-또한-소스코드는-이클립스를-사용하셔도-되지만-Visual-Studio-Code에-React관련-extension과-JavaExtension-Pack-Spring-ExtensionPacK을-사용하여-개발하였습니다"><a href="#window기준으로-mvn이-먹히지-않을경우-mvnw로-변경하여-돌리시면-됩니다-또한-소스코드는-이클립스를-사용하셔도-되지만-Visual-Studio-Code에-React관련-extension과-JavaExtension-Pack-Spring-ExtensionPacK을-사용하여-개발하였습니다" class="headerlink" title="window기준으로 mvn이 먹히지 않을경우 .\mvnw로 변경하여 돌리시면 됩니다. 또한 소스코드는 이클립스를 사용하셔도 되지만 Visual Studio Code에 React관련 extension과 JavaExtension Pack, Spring ExtensionPacK을 사용하여 개발하였습니다."></a>window기준으로 mvn이 먹히지 않을경우 .\mvnw로 변경하여 돌리시면 됩니다. 또한 소스코드는 이클립스를 사용하셔도 되지만 Visual Studio Code에 React관련 extension과 JavaExtension Pack, Spring ExtensionPacK을 사용하여 개발하였습니다.</h5><h4 id="node-js가-설치되어-있어야합니다"><a href="#node-js가-설치되어-있어야합니다" class="headerlink" title="node.js가 설치되어 있어야합니다."></a>node.js가 설치되어 있어야합니다.</h4><h2 id="1-SpringBoot-Project설정"><a href="#1-SpringBoot-Project설정" class="headerlink" title="1. SpringBoot Project설정"></a>1. SpringBoot Project설정</h2><p><a href="https://start.spring.io/">https://start.spring.io</a> 사이트에서 Spring Boot설정.</p><p>dependency에 web을 추가.</p><h2 id="2-pom-xml설정"><a href="#2-pom-xml설정" class="headerlink" title="2. pom.xml설정"></a>2. pom.xml설정</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>no.kantega<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-and-react<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-and-react<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Controller추가"><a href="#3-Controller추가" class="headerlink" title="3. Controller추가"></a>3. Controller추가</h2><p>처음 설정된 프로젝트는 src하위로 아무것도 존재하지 않으므로 Controller를 추가해줍니다.</p><p>참고로 vscode에서 사용시 auto import는 alt + shift + o입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> no.kantega.springandreact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, the time at the server is now &quot;</span> + <span class="keyword">new</span> Date() + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-실행"><a href="#4-실행" class="headerlink" title="4. 실행"></a>4. 실행</h2><p>일단 Spring은 maven기반이므로 한번 돌려서 필요한 라이브러리들을 끌어오고 실행이 되는지 확인을 합니다.</p><h2 id="5-React-추가"><a href="#5-React-추가" class="headerlink" title="5. React 추가"></a>5. React 추가</h2><p>터미널을 실행하여 해당 프로젝트 폴더에서 다음 명령어를 실행합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app frontend</span><br></pre></td></tr></table></figure><h2 id="6-http-proxy-middleware를-추가"><a href="#6-http-proxy-middleware를-추가" class="headerlink" title="6. http-proxy-middleware를 추가"></a>6. http-proxy-middleware를 추가</h2><p>현재 추가된 React는 port 3000번에서 실행되며 SpringBoot는 port 8080에서 실행되게 됩니다. 개발시 port 3000에서 8080으로 넘겨주는 역활을 할 예정입니다.</p><p>아까 그 터미널 창에서 다음 명령어를 사용합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd frontend</span><br><span class="line">npm install --save http-proxy-middleware</span><br></pre></td></tr></table></figure><h2 id="7-React-실행"><a href="#7-React-실행" class="headerlink" title="7. React 실행"></a>7. React 실행</h2><p>실행위치는 frontend 폴더 안이어야합니다.<br>위과정을 거쳤을 경우 이미 frontend안이라 딱히 상관없습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>초기 실행시에는 시간이 걸릴 수 있습니다.</p><h2 id="8-proxy연결"><a href="#8-proxy연결" class="headerlink" title="8. proxy연결"></a>8. proxy연결</h2><p>fontend/src/setupProxy.js추가</p><p>setupProxy.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(proxy(<span class="string">&#x27;/api&#x27;</span>, &#123; <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span> &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>그 후 React 재실행(아까 실행했던 터미널에서 ctrl + c로 종료후 다시 실행)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>연결됬는지 확인은 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:3000&#x2F;api&#x2F;hello</span><br></pre></td></tr></table></figure><p>터미널에 입력 결과가 나오면 잘된 것.</p><p>그후 frontend/src/App.js파일을 열어 다음과 같이 수정</p><p>App.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="built_in">this</span>.hello, <span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fetch(<span class="string">&#x27;/api/hello&#x27;</span>)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> response.text())</span><br><span class="line">            .then(<span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;<span class="attr">message</span>: message&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">                &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">                    &lt;img src=&#123;logo&#125; className=<span class="string">&quot;App-logo&quot;</span> alt=<span class="string">&quot;logo&quot;</span>/&gt;</span><br><span class="line">                    &lt;h1 className=<span class="string">&quot;App-title&quot;</span>&gt;&#123;<span class="built_in">this</span>.state.message&#125;&lt;/h1&gt;</span><br><span class="line">                &lt;/header&gt;</span><br><span class="line">                &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;</span><br><span class="line">                    To get started, edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>화면이 제대로 바뀌는지 확인</p><h2 id="9-배포용-패키지-생성"><a href="#9-배포용-패키지-생성" class="headerlink" title="9. 배포용 패키지 생성"></a>9. 배포용 패키지 생성</h2><p>pom.xml안에 /build/plugins에 기존 plugin아래 내용 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.eirslett<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frontend-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">workingDirectory</span>&gt;</span>frontend<span class="tag">&lt;/<span class="name">workingDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">installDirectory</span>&gt;</span>target<span class="tag">&lt;/<span class="name">installDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>install node and npm<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nodeVersion</span>&gt;</span>v8.9.4<span class="tag">&lt;/<span class="name">nodeVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">npmVersion</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">npmVersion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>install<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm run build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>run build<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>추가후</p><p>기존 mvn spring-boot:run 했던 터미널창에서 ctrl + C 연타하여 서버 다운후 재가동.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>위 과정은 react파일을 spring boot에 포함시키기기 위해 빌드했습니다.</p><h2 id="10-빌드된-파일-jar파일로-만들기"><a href="#10-빌드된-파일-jar파일로-만들기" class="headerlink" title="10. 빌드된 파일 jar파일로 만들기"></a>10. 빌드된 파일 jar파일로 만들기</h2><p>pom.xml안에 /build/plugins에 기존 plugin아래 아래내용 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">&quot;$&#123;project.build.directory&#125;/classes/public&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;project.basedir&#125;/frontend/build&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">copy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>추가후</p><p>기존 mvn spring-boot:run 했던 터미널창에서 ctrl + C 연타하여 서버 다운후 재가동.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>위 과정을 걸치면 projectDir/target/ jar파일이 생성됨.</p><p>jar파일을 실행해봅시다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd target&#x2F;</span><br><span class="line"></span><br><span class="line">java -jar .\reactwithspringboot-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>이렇게 되면 끝</p><p>확인은 웹 브라우저에서</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080</span><br></pre></td></tr></table></figure><p>위 주소로 확인.</p><h1 id="인용"><a href="#인용" class="headerlink" title="인용"></a>인용</h1><blockquote><p><a href="https://start.spring.io/">https://start.spring.io/</a></p></blockquote><blockquote><p><a href="https://start.goodtime.co.kr/2018/09/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%EC%85%8B%EC%97%85-2018/">https://start.goodtime.co.kr/2018/09/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%EC%85%8B%EC%97%85-2018/</a></p></blockquote><blockquote><p><a href="https://github.com/kantega/react-and-spring">https://github.com/kantega/react-and-spring</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="http://sherwher.github.io/categories/JAVA/">JAVA</category>
      
      <category domain="http://sherwher.github.io/categories/JAVA/SpringBoot/">SpringBoot</category>
      
      <category domain="http://sherwher.github.io/categories/JAVA/SpringBoot/react/">react</category>
      
      
      <category domain="http://sherwher.github.io/tags/post/">post</category>
      
      <category domain="http://sherwher.github.io/tags/react/">react</category>
      
      <category domain="http://sherwher.github.io/tags/springboot/">springboot</category>
      
      <category domain="http://sherwher.github.io/tags/proxy/">proxy</category>
      
      
      <comments>http://sherwher.github.io/2018/12/26/ReactWithSpringBoot-%EB%A6%AC%EC%97%91%ED%8A%B8,%20%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%20%EC%97%B0%EB%8F%99/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
